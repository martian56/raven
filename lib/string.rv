// lib/string.rv - String Utilities Library

// String manipulation functions
fun trim(s: String) -> String {
    let start: int = 0;
    let end: int = len(s) - 1;
    
    // Find start of non-whitespace
    while (start <= end && s[start] == " ") {
        start = start + 1;
    }
    
    // Find end of non-whitespace
    while (end >= start && s[end] == " ") {
        end = end - 1;
    }
    
    if (start > end) {
        return "";
    }
    
    return s.slice(start, end + 1);
}

fun trim_left(s: String) -> String {
    let start: int = 0;
    while (start < len(s) && s[start] == " ") {
        start = start + 1;
    }
    return s.slice(start, len(s));
}

fun trim_right(s: String) -> String {
    let end: int = len(s) - 1;
    while (end >= 0 && s[end] == " ") {
        end = end - 1;
    }
    return s.slice(0, end + 1);
}

fun to_upper(s: String) -> String {
    // Simplified implementation - just return the string as-is
    // In a real implementation, this would convert lowercase to uppercase
    return s;
}

fun to_lower(s: String) -> String {
    // Simplified implementation - just return the string as-is
    // In a real implementation, this would convert uppercase to lowercase
    return s;
}

fun starts_with(s: String, prefix: String) -> bool {
    if (len(prefix) > len(s)) {
        return false;
    }
    
    let i: int = 0;
    while (i < len(prefix)) {
        if (s[i] != prefix[i]) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fun ends_with(s: String, suffix: String) -> bool {
    if (len(suffix) > len(s)) {
        return false;
    }
    
    let start: int = len(s) - len(suffix);
    let i: int = 0;
    while (i < len(suffix)) {
        if (s[start + i] != suffix[i]) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fun contains(s: String, substring: String) -> bool {
    if (len(substring) == 0) {
        return true;
    }
    
    let i: int = 0;
    while (i <= len(s) - len(substring)) {
        let j: int = 0;
        let found: bool = true;
        while (j < len(substring)) {
            if (s[i + j] != substring[j]) {
                found = false;
                break;
            }
            j = j + 1;
        }
        if (found) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

fun index_of(s: String, substring: String) -> int {
    if (len(substring) == 0) {
        return 0;
    }
    
    let i: int = 0;
    while (i <= len(s) - len(substring)) {
        let j: int = 0;
        let found: bool = true;
        while (j < len(substring)) {
            if (s[i + j] != substring[j]) {
                found = false;
                break;
            }
            j = j + 1;
        }
        if (found) {
            return i;
        }
        i = i + 1;
    }
    return -1;
}

fun last_index_of(s: String, substring: String) -> int {
    if (len(substring) == 0) {
        return len(s);
    }
    
    let i: int = len(s) - len(substring);
    while (i >= 0) {
        let j: int = 0;
        let found: bool = true;
        while (j < len(substring)) {
            if (s[i + j] != substring[j]) {
                found = false;
                break;
            }
            j = j + 1;
        }
        if (found) {
            return i;
        }
        i = i - 1;
    }
    return -1;
}

fun pad_left(s: String, length: int, pad_char: String) -> String {
    if (len(s) >= length) {
        return s;
    }
    
    let padding_length: int = length - len(s);
    let padding: String = "";
    let i: int = 0;
    while (i < padding_length) {
        padding = padding + pad_char;
        i = i + 1;
    }
    
    return padding + s;
}

fun pad_right(s: String, length: int, pad_char: String) -> String {
    if (len(s) >= length) {
        return s;
    }
    
    let padding_length: int = length - len(s);
    let padding: String = "";
    let i: int = 0;
    while (i < padding_length) {
        padding = padding + pad_char;
        i = i + 1;
    }
    
    return s + padding;
}

fun pad_center(s: String, length: int, pad_char: String) -> String {
    if (len(s) >= length) {
        return s;
    }
    
    let total_padding: int = length - len(s);
    let left_padding: int = total_padding / 2;
    let right_padding: int = total_padding - left_padding;
    
    let left_pad: String = "";
    let i: int = 0;
    while (i < left_padding) {
        left_pad = left_pad + pad_char;
        i = i + 1;
    }
    
    let right_pad: String = "";
    i = 0;
    while (i < right_padding) {
        right_pad = right_pad + pad_char;
        i = i + 1;
    }
    
    return left_pad + s + right_pad;
}

fun repeat(s: String, count: int) -> String {
    if (count <= 0) {
        return "";
    }
    
    let result: String = "";
    let i: int = 0;
    while (i < count) {
        result = result + s;
        i = i + 1;
    }
    return result;
}

fun reverse(s: String) -> String {
    let result: String = "";
    let i: int = len(s) - 1;
    while (i >= 0) {
        result = result + s[i];
        i = i - 1;
    }
    return result;
}

fun capitalize(s: String) -> String {
    if (len(s) == 0) {
        return s;
    }
    
    let first_char: String = s[0];
    let rest: String = s.slice(1, len(s));
    
    return to_upper(first_char) + to_lower(rest);
}

fun title_case(s: String) -> String {
    let words: String[] = s.split(" ");
    let result: String[] = [];
    
    let i: int = 0;
    while (i < len(words)) {
        result.push(capitalize(words[i]));
        i = i + 1;
    }
    
    return result.join(" ");
}

fun is_empty(s: String) -> bool {
    return len(s) == 0;
}

fun is_blank(s: String) -> bool {
    let trimmed: String = trim(s);
    return len(trimmed) == 0;
}

fun is_numeric(s: String) -> bool {
    if (len(s) == 0) {
        return false;
    }
    
    let i: int = 0;
    let has_dot: bool = false;
    
    // Check for leading sign
    if (s[0] == "+" || s[0] == "-") {
        i = 1;
    }
    
    while (i < len(s)) {
        let char: String = s[i];
        if (char >= "0" && char <= "9") {
            // Valid digit
        } else {
            if (char == "." && !has_dot) {
                has_dot = true;
            } else {
                return false;
            }
        }
        i = i + 1;
    }
    
    return true;
}

fun is_alpha(s: String) -> bool {
    if (len(s) == 0) {
        return false;
    }
    
    let i: int = 0;
    while (i < len(s)) {
        let char: String = s[i];
        if (!((char >= "a" && char <= "z") || (char >= "A" && char <= "Z"))) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

fun is_alphanumeric(s: String) -> bool {
    if (len(s) == 0) {
        return false;
    }
    
    let i: int = 0;
    while (i < len(s)) {
        let char: String = s[i];
        if (!((char >= "a" && char <= "z") || (char >= "A" && char <= "Z") || (char >= "0" && char <= "9"))) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

// String comparison functions
fun compare(a: String, b: String) -> int {
    let min_len: int = min(len(a), len(b));
    let i: int = 0;
    while (i < min_len) {
        if (a[i] < b[i]) {
            return -1;
        } else {
            if (a[i] > b[i]) {
                return 1;
            }
        }
        i = i + 1;
    }
    
    if (len(a) < len(b)) {
        return -1;
    } else {
        if (len(a) > len(b)) {
            return 1;
        } else {
            return 0;
        }
    }
}

fun compare_ignore_case(a: String, b: String) -> int {
    return compare(to_lower(a), to_lower(b));
}
