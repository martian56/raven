{
  "name": "Raven",
  "scopeName": "source.raven",
  "fileTypes": ["rv"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#structs"
    },
    {
      "include": "#enums"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.raven",
          "begin": "//",
          "end": "$",
          "patterns": [
            {
              "name": "keyword.other.region.raven",
              "match": "(#region|#endregion)"
            }
          ]
        },
        {
          "name": "comment.block.raven",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "name": "keyword.other.region.raven",
              "match": "(#region|#endregion)"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.raven",
          "match": "\\b(let|fun|if|else|while|for|return|import|export|struct|enum)\\b"
        },
        {
          "name": "keyword.operator.raven",
          "match": "\\b(and|or|not)\\b"
        },
        {
          "name": "constant.language.raven",
          "match": "\\b(true|false|null|void)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.raven",
          "match": "\\b(int|float|bool|String)\\b"
        },
        {
          "name": "support.type.array.raven",
          "match": "\\b(int\\[\\]|float\\[\\]|bool\\[\\]|String\\[\\])\\b"
        },
        {
          "name": "support.type.custom.raven",
          "match": "\\b[A-Z][a-zA-Z0-9]*\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.raven",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.raven",
              "match": "\\\\."
            },
            {
              "name": "variable.other.placeholder.raven",
              "match": "\\{\\}"
            }
          ]
        },
        {
          "name": "string.quoted.single.raven",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.raven",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.raven",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.float.raven",
          "match": "\\b\\d+\\.\\d+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.raven",
          "match": "[+\\-*/%]"
        },
        {
          "name": "keyword.operator.comparison.raven",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.raven",
          "match": "(&&|\\|\\|)"
        },
        {
          "name": "keyword.operator.assignment.raven",
          "match": "="
        },
        {
          "name": "keyword.operator.unary.raven",
          "match": "[!\\-]"
        },
        {
          "name": "keyword.operator.access.raven",
          "match": "\\."
        },
        {
          "name": "keyword.operator.enum.raven",
          "match": "::"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.raven",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
        },
        {
          "name": "support.function.builtin.raven",
          "match": "\\b(print|input|format|len|type|read_file|write_file|append_file|file_exists|enum_from_string)\\b"
        }
      ]
    },
    "structs": {
      "patterns": [
        {
          "name": "entity.name.type.struct.raven",
          "match": "\\bstruct\\s+([A-Z][a-zA-Z0-9]*)\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.raven"
            }
          }
        },
        {
          "name": "entity.name.type.struct.instantiation.raven",
          "match": "\\b([A-Z][a-zA-Z0-9]*)\\s*\\{",
          "captures": {
            "1": {
              "name": "entity.name.type.raven"
            }
          }
        }
      ]
    },
    "enums": {
      "patterns": [
        {
          "name": "entity.name.type.enum.raven",
          "match": "\\benum\\s+([A-Z][a-zA-Z0-9]*)\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.raven"
            }
          }
        },
        {
          "name": "entity.name.type.enum.variant.raven",
          "match": "\\b([A-Z][a-zA-Z0-9]*)::([A-Z][a-zA-Z0-9]*)\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.raven"
            },
            "2": {
              "name": "constant.other.enum.variant.raven"
            }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.declaration.raven",
          "match": "\\blet\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
          "captures": {
            "1": {
              "name": "variable.name.raven"
            }
          }
        },
        {
          "name": "variable.other.raven",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.comma.raven",
          "match": ","
        },
        {
          "name": "punctuation.terminator.statement.raven",
          "match": ";"
        },
        {
          "name": "punctuation.section.block.begin.raven",
          "match": "\\{"
        },
        {
          "name": "punctuation.section.block.end.raven",
          "match": "\\}"
        },
        {
          "name": "punctuation.section.parens.begin.raven",
          "match": "\\("
        },
        {
          "name": "punctuation.section.parens.end.raven",
          "match": "\\)"
        },
        {
          "name": "punctuation.section.brackets.begin.raven",
          "match": "\\["
        },
        {
          "name": "punctuation.section.brackets.end.raven",
          "match": "\\]"
        }
      ]
    }
  }
}
