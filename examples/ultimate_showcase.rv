print("╔═══════════════════════════════════════╗");
print("║  RAVEN ULTIMATE SHOWCASE PROGRAM     ║");
print("║  Demonstrating All Language Features ║");
print("╚═══════════════════════════════════════╝");
print("");

let globalScore: int = 0;
let globalLevel: int = 1;
let totalOperations: int = 0;

print("=== MODULE 1: VARIABLE TYPES ===");
print("");

let myInt: int = 42;
let myFloat: float = 3.14;
let myBool: bool = true;
let myString: String = "Raven Language";

print("Integer:");
print(myInt);
print("Float:");
print(myFloat);
print("Boolean:");
print(myBool);
print("String:");
print(myString);

totalOperations = totalOperations + 4;
globalScore = globalScore + 100;

print("");
print("=== MODULE 2: ARITHMETIC SYSTEM ===");
print("");

let num1: int = 100;
let num2: int = 25;

print("Numbers:");
print(num1);
print(num2);

let addResult: int = num1 + num2;
print("Addition:");
print(addResult);

let subResult: int = num1 - num2;
print("Subtraction:");
print(subResult);

let mulResult: int = num1 * num2;
print("Multiplication:");
print(mulResult);

let divResult: int = num1 / num2;
print("Division:");
print(divResult);

totalOperations = totalOperations + 4;
globalScore = globalScore + 200;

print("");
print("=== MODULE 3: COMPARISON OPERATORS ===");
print("");

let val1: int = 50;
let val2: int = 30;

print("Values:");
print(val1);
print(val2);

let isEqual: bool = val1 == val2;
print("Are equal:");
print(isEqual);

let isNotEqual: bool = val1 != val2;
print("Not equal:");
print(isNotEqual);

let isLess: bool = val1 < val2;
print("First less:");
print(isLess);

let isGreater: bool = val1 > val2;
print("First greater:");
print(isGreater);

let isLessOrEqual: bool = val1 <= val2;
print("First <= second:");
print(isLessOrEqual);

let isGreaterOrEqual: bool = val1 >= val2;
print("First >= second:");
print(isGreaterOrEqual);

totalOperations = totalOperations + 6;
globalScore = globalScore + 150;

print("");
print("=== MODULE 4: BOOLEAN LOGIC ===");
print("");

let flag1: bool = true;
let flag2: bool = false;

print("Flags:");
print(flag1);
print(flag2);

let andResult: bool = flag1 && flag2;
print("AND result:");
print(andResult);

let orResult: bool = flag1 || flag2;
print("OR result:");
print(orResult);

totalOperations = totalOperations + 2;
globalScore = globalScore + 100;

print("");
print("=== MODULE 5: CONDITIONAL BRANCHING ===");
print("");

let testValue: int = 75;
print("Test value:");
print(testValue);

if (testValue > 90) {
    print("Grade: A - Excellent!");
    globalScore = globalScore + 500;
} elseif (testValue > 70) {
    print("Grade: B - Good!");
    globalScore = globalScore + 300;
} elseif (testValue > 50) {
    print("Grade: C - Fair");
    globalScore = globalScore + 150;
} else {
    print("Grade: F - Needs improvement");
    globalScore = globalScore + 50;
}

totalOperations = totalOperations + 1;

print("");
print("=== MODULE 6: WHILE LOOPS ===");
print("");

print("Counting down from 5:");
let countdown: int = 5;
while (countdown > 0) {
    print(countdown);
    countdown = countdown - 1;
    totalOperations = totalOperations + 1;
}
print("Liftoff!");

globalScore = globalScore + 200;

print("");
print("=== MODULE 7: FOR LOOPS ===");
print("");

print("Counting up to 5:");
for (let counter: int = 1; counter <= 5; counter = counter + 1) {
    print(counter);
    totalOperations = totalOperations + 1;
}

globalScore = globalScore + 200;

print("");
print("=== MODULE 8: FIBONACCI GENERATOR ===");
print("");

print("Fibonacci sequence (first 12):");
let fib_a: int = 0;
let fib_b: int = 1;
let fib_count: int = 0;

print(fib_a);
print(fib_b);

while (fib_count < 10) {
    let fib_next: int = fib_a + fib_b;
    print(fib_next);
    fib_a = fib_b;
    fib_b = fib_next;
    fib_count = fib_count + 1;
    totalOperations = totalOperations + 1;
}

globalScore = globalScore + 400;

print("");
print("=== MODULE 9: FACTORIAL CALCULATOR ===");
print("");

let factInput: int = 6;
print("Calculating factorial of:");
print(factInput);

let factResult: int = 1;
let factI: int = 1;

while (factI <= factInput) {
    factResult = factResult * factI;
    factI = factI + 1;
    totalOperations = totalOperations + 1;
}

print("Result:");
print(factResult);

globalScore = globalScore + 300;

print("");
print("=== MODULE 10: PRIME NUMBER FINDER ===");
print("");

print("Finding primes up to 20:");

let primeTest: int = 2;
let primesFound: int = 0;

while (primeTest <= 20) {
    let isPrimeNum: bool = true;
    let primeDiv: int = 2;
    let primeLimit: int = primeTest / 2;
    
    if (primeTest > 2) {
        let keepChecking: bool = true;
        
        while (keepChecking) {
            let primeQuot: int = primeTest / primeDiv;
            let primeProd: int = primeQuot * primeDiv;
            let primeRem: int = primeTest - primeProd;
            
            if (primeRem == 0) {
                isPrimeNum = false;
            }
            
            primeDiv = primeDiv + 1;
            
            let withinBounds: bool = primeDiv <= primeLimit;
            keepChecking = withinBounds && isPrimeNum;
            totalOperations = totalOperations + 1;
        }
    }
    
    if (isPrimeNum) {
        print(primeTest);
        primesFound = primesFound + 1;
    }
    
    primeTest = primeTest + 1;
}

print("Total primes found:");
print(primesFound);

globalScore = globalScore + 500;

print("");
print("=== MODULE 11: POWER CALCULATOR ===");
print("");

let base: int = 2;
let exponent: int = 10;

print("Calculating:");
print(base);
print("to the power of");
print(exponent);

let powerResult: int = 1;
let powerCount: int = 0;

while (powerCount < exponent) {
    powerResult = powerResult * base;
    powerCount = powerCount + 1;
    totalOperations = totalOperations + 1;
}

print("Result:");
print(powerResult);

globalScore = globalScore + 250;

print("");
print("=== MODULE 12: SUMMATION ENGINE ===");
print("");

print("Sum of 1 to 100:");

let sumValue: int = 0;
let sumIndex: int = 1;

while (sumIndex <= 100) {
    sumValue = sumValue + sumIndex;
    sumIndex = sumIndex + 1;
    totalOperations = totalOperations + 1;
}

print(sumValue);

globalScore = globalScore + 300;

print("");
print("=== MODULE 13: NESTED CONTROL FLOW ===");
print("");

print("Multiplication table (1-5):");

for (let row: int = 1; row <= 5; row = row + 1) {
    for (let col: int = 1; col <= 5; col = col + 1) {
        let cellValue: int = row * col;
        print(cellValue);
        totalOperations = totalOperations + 1;
    }
}

globalScore = globalScore + 400;

print("");
print("=== MODULE 14: COMPLEX BOOLEAN LOGIC ===");
print("");

let health: int = 80;
let energy: int = 60;
let hasWeapon: bool = true;
let hasArmor: bool = true;

print("Status Check:");
print("Health:");
print(health);
print("Energy:");
print(energy);

let healthGood: bool = health > 50;
let energyGood: bool = energy > 50;
let combatReady: bool = healthGood && energyGood;
let fullyEquipped: bool = hasWeapon && hasArmor;
let missionReady: bool = combatReady && fullyEquipped;

if (missionReady) {
    print("STATUS: Mission Ready!");
    globalScore = globalScore + 500;
} else {
    print("STATUS: Not ready");
    globalScore = globalScore + 100;
}

totalOperations = totalOperations + 1;

print("");
print("=== MODULE 15: LEVEL PROGRESSION SYSTEM ===");
print("");

print("Current score:");
print(globalScore);

let levelThreshold: int = 1000;

if (globalScore >= levelThreshold) {
    globalLevel = globalLevel + 1;
    globalScore = globalScore - levelThreshold;
    print("LEVEL UP!");
}

if (globalScore >= levelThreshold) {
    globalLevel = globalLevel + 1;
    globalScore = globalScore - levelThreshold;
    print("LEVEL UP!");
}

if (globalScore >= levelThreshold) {
    globalLevel = globalLevel + 1;
    globalScore = globalScore - levelThreshold;
    print("LEVEL UP!");
}

print("Current level:");
print(globalLevel);

print("Remaining score:");
print(globalScore);

print("");
print("╔═══════════════════════════════════════╗");
print("║       FINAL STATISTICS                ║");
print("╚═══════════════════════════════════════╝");
print("");

print("Total operations performed:");
print(totalOperations);

print("Final score:");
print(globalScore);

print("Final level:");
print(globalLevel);

let efficiency: int = globalScore / totalOperations;
print("Efficiency rating:");
print(efficiency);

print("");

if (totalOperations > 200) {
    print("ACHIEVEMENT: Operation Master!");
}

if (globalLevel > 3) {
    print("ACHIEVEMENT: Level Legend!");
}

if (efficiency > 15) {
    print("ACHIEVEMENT: Efficiency Expert!");
}

print("");
print("╔═══════════════════════════════════════╗");
print("║   ALL MODULES EXECUTED SUCCESSFULLY   ║");
print("║      SHOWCASE COMPLETE!               ║");
print("╚═══════════════════════════════════════╝");

