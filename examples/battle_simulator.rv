let playerHealth: int = 100;
let playerAttack: int = 15;
let playerDefense: int = 10;
let playerLevel: int = 1;
let playerExperience: int = 0;

let enemyHealth: int = 80;
let enemyAttack: int = 12;
let enemyDefense: int = 8;

let battleRound: int = 1;
let totalDamageDealt: int = 0;
let totalDamageTaken: int = 0;
let criticalHits: int = 0;
let dodges: int = 0;

print("=== EPIC BATTLE SIMULATOR ===");
print("Player Stats:");
print("Health:");
print(playerHealth);
print("Attack:");
print(playerAttack);
print("Defense:");
print(playerDefense);
print("");

print("Enemy Stats:");
print("Health:");
print(enemyHealth);
print("Attack:");
print(enemyAttack);
print("Defense:");
print(enemyDefense);
print("");

print("=== BATTLE START ===");
print("");

let playerDamage: int = 0;
let enemyDamage: int = 0;
let critCounter: int = 0;
let dodgeCounter: int = 0;

let continueLeft: bool = true;
let continueRight: bool = true;

while (continueLeft && continueRight) {
    print("--- Round ---");
    print(battleRound);
    
    playerDamage = playerAttack - enemyDefense;
    
    if (playerDamage < 1) {
        playerDamage = 1;
    }
    
    critCounter = critCounter + 1;
    if (critCounter == 3) {
        print("CRITICAL HIT!");
        playerDamage = playerDamage * 2;
        criticalHits = criticalHits + 1;
        critCounter = 0;
    }
    
    enemyHealth = enemyHealth - playerDamage;
    totalDamageDealt = totalDamageDealt + playerDamage;
    
    print("Player deals damage:");
    print(playerDamage);
    print("Enemy health:");
    print(enemyHealth);
    
    continueRight = enemyHealth > 0;
    
    if (continueRight) {
        enemyDamage = enemyAttack - playerDefense;
        
        if (enemyDamage < 1) {
            enemyDamage = 1;
        }
        
        dodgeCounter = dodgeCounter + 1;
        if (dodgeCounter == 5) {
            print("Player DODGED!");
            enemyDamage = 0;
            dodges = dodges + 1;
            dodgeCounter = 0;
        }
        
        if (enemyDamage > 0) {
            playerHealth = playerHealth - enemyDamage;
            totalDamageTaken = totalDamageTaken + enemyDamage;
            
            print("Enemy deals damage:");
            print(enemyDamage);
        }
        
        print("Player health:");
        print(playerHealth);
    }
    
    print("");
    battleRound = battleRound + 1;
    
    continueLeft = playerHealth > 0;
    continueRight = enemyHealth > 0;
}

print("=== BATTLE END ===");
print("");

if (playerHealth > 0) {
    print("*** VICTORY! ***");
    print("");
    
    let experienceGained: int = 50 + battleRound * 5;
    playerExperience = playerExperience + experienceGained;
    
    print("Experience gained:");
    print(experienceGained);
    print("Total experience:");
    print(playerExperience);
    
    if (playerExperience >= 100) {
        playerLevel = playerLevel + 1;
        playerExperience = playerExperience - 100;
        playerHealth = 100;
        playerAttack = playerAttack + 5;
        playerDefense = playerDefense + 3;
        
        print("");
        print("*** LEVEL UP! ***");
        print("New level:");
        print(playerLevel);
        print("New attack:");
        print(playerAttack);
        print("New defense:");
        print(playerDefense);
        print("Health restored to:");
        print(playerHealth);
    }
} else {
    print("*** DEFEAT! ***");
    print("You were vanquished in battle.");
}

print("");
print("=== BATTLE STATISTICS ===");

let totalRounds: int = battleRound - 1;
print("Total rounds:");
print(totalRounds);

print("Total damage dealt:");
print(totalDamageDealt);

print("Total damage taken:");
print(totalDamageTaken);

print("Critical hits:");
print(criticalHits);

print("Successful dodges:");
print(dodges);

let netDamage: int = totalDamageDealt - totalDamageTaken;
print("Net damage:");
print(netDamage);

if (totalRounds > 0) {
    let averageDamagePerRound: int = totalDamageDealt / totalRounds;
    print("Average damage per round:");
    print(averageDamagePerRound);
}

print("");
print("=== PERFORMANCE ANALYSIS ===");

if (totalRounds < 5) {
    print("RATING: S-TIER");
    print("Flawless victory! Extremely efficient!");
} elseif (totalRounds < 10) {
    print("RATING: A-TIER");
    print("Great performance! Well fought!");
} elseif (totalRounds < 15) {
    print("RATING: B-TIER");
    print("Good effort. Room for improvement.");
} else {
    print("RATING: C-TIER");
    print("Long battle. Consider upgrading equipment.");
}

print("");

if (criticalHits > 3) {
    print("CRITICAL PERFORMANCE: Exceptional!");
} elseif (criticalHits > 1) {
    print("CRITICAL PERFORMANCE: Good.");
} else {
    print("CRITICAL PERFORMANCE: Low.");
}

if (dodges > 2) {
    print("EVASION: Masterful!");
} elseif (dodges > 0) {
    print("EVASION: Adequate.");
} else {
    print("EVASION: None.");
}

print("");

let survivalRate: int = playerHealth;
if (survivalRate > 50) {
    print("SURVIVAL: Excellent! Barely scratched!");
} elseif (survivalRate > 20) {
    print("SURVIVAL: Moderate damage taken.");
} elseif (survivalRate > 0) {
    print("SURVIVAL: Close call! Nearly defeated!");
} else {
    print("SURVIVAL: Failed. Better luck next time.");
}

print("");
print("=== SIMULATION COMPLETE ===");
